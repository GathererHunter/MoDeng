# encoding=utf-8import wximport wx.xrcimport wx.gridfrom Config.Sub import dict_stk_listfrom DataSource.Code2Name import code2namefrom Experiment.wxpythonGUI.MyCode.Data_Pro_Sub import get_pic_dictfrom SDK.Gen_Stk_Pic_Sub import gen_Hour_MACD_Pic_wx, \    gen_Day_Pic_wx, gen_W_M_MACD_Pic_wx, gen_Idx_Pic_wxclass MyImageRenderer(wx.grid.GridCellRenderer):    def __init__(self, img):        wx.grid.GridCellRenderer.__init__(self)        self.img = img    def Draw(self, grid, attr, dc, rect, row, col, isSelected):        image = wx.MemoryDC()        image.SelectObject(self.img)        dc.SetBackgroundMode(wx.SOLID)        if isSelected:            dc.SetBrush(wx.Brush(wx.BLUE, wx.SOLID))            dc.SetPen(wx.Pen(wx.BLUE, 1, wx.SOLID))        else:            dc.SetBrush(wx.Brush(wx.WHITE, wx.SOLID))            dc.SetPen(wx.Pen(wx.WHITE, 1, wx.SOLID))        dc.DrawRectangle(rect)        width, height = self.img.GetWidth(), self.img.GetHeight()        if width > rect.width - 2:            width = rect.width - 2        if height > rect.height - 2:            height = rect.height - 2        dc.Blit(rect.x + 1, rect.y + 1, width, height, image, 0, 0, wx.COPY, True)class MyPanel1(wx.Panel):    def __init__(self, parent, stk_info):        wx.Panel.__init__(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.Size(500, 300),                          style=wx.TAB_TRAVERSAL)        bSizer4 = wx.BoxSizer(wx.VERTICAL)        self.my_grid4 = wx.grid.Grid(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0)        # Grid        self.my_grid4.CreateGrid(len(stk_info), 5)        self.my_grid4.EnableEditing(True)        self.my_grid4.EnableGridLines(True)        self.my_grid4.EnableDragGridSize(False)        self.my_grid4.SetMargins(0, 0)        # Columns        self.my_grid4.EnableDragColMove(False)        self.my_grid4.EnableDragColSize(True)        self.my_grid4.SetColLabelSize(30)        self.my_grid4.SetColLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)        self.my_grid4.SetColLabelValue(0, "定时检测")        self.my_grid4.SetColLabelValue(1, "小时M")        self.my_grid4.SetColLabelValue(2, "日M")        self.my_grid4.SetColLabelValue(3, "周/月M")        self.my_grid4.SetColLabelValue(4, "其他指数")        # Rows        self.my_grid4.EnableDragRowSize(True)        self.my_grid4.SetRowLabelSize(80)        self.my_grid4.SetRowLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)        # self.my_grid4.SetRowLabelValue()        # Add name to Rows        self.addRowName(list(stk_info.keys()))        # Add pic to cell        # for r_id in range(len(stk_info.keys())):        #     self.insert_Pic_To_Cell(r_id, 1, stk_info[list(stk_info.keys())[r_id]]['hour'])        #     self.insert_Pic_To_Cell(r_id, 2, stk_info[list(stk_info.keys())[r_id]]['day'])        #     self.insert_Pic_To_Cell(r_id, 3, stk_info[list(stk_info.keys())[r_id]]['wm'])        #     self.insert_Pic_To_Cell(r_id, 4, stk_info[list(stk_info.keys())[r_id]]['index'])        # Label Appearance        # Cell Defaults        self.my_grid4.SetDefaultCellAlignment(wx.ALIGN_LEFT, wx.ALIGN_TOP)        # 设置行间隔        # self.my_grid4.SetMargins(0, 2)                bSizer4.Add(self.my_grid4, 0, wx.ALL, 5)        self.SetSizer(bSizer4)        self.Layout()    def __del__(self):        pass    def addRowName(self, stk_code_list):        """        添加行名称        :param stk_code_list:        :return:        """        for idx in range(len(stk_code_list)):            self.my_grid4.SetRowLabelValue(idx, code2name(stk_code_list[idx]))    def insert_Pic_To_Cell(self, r, c, img):        """        :param r:        :param c:        :param pic:        :return:        """        img_Rd = MyImageRenderer(wx.Bitmap(img))        self.my_grid4.SetCellRenderer(r, c, img_Rd)        self.my_grid4.SetColSize(c, img.GetWidth() + 2)        self.my_grid4.SetRowSize(r, img.GetHeight() + 2)def timer_update_pic(kind):    """    在计时器中调用，用于更新小时图片    :param kind:    h:小时    d:天    wm:周、月    idx: 指数    :return:    返回的图片应该 执行page和行号，便于更新！    以多层字典的方式返回结果，第一层区分page，第二层区分行号！    """    r_dic = {        'Index': {},        'Buy': {},        'Concerned': {}    }    for page in ['Index', 'Buy', 'Concerned']:        for stk in range(len(dict_stk_list[page])):            if kind is 'h':                r_dic[page][stk] = gen_Hour_MACD_Pic_wx(dict_stk_list[page][stk])            elif kind is 'd':                r_dic[page][stk] = gen_Day_Pic_wx(dict_stk_list[page][stk])            elif kind is 'wm':                r_dic[page][stk] = gen_W_M_MACD_Pic_wx(dict_stk_list[page][stk])            elif kind is 'idx':                r_dic[page][stk] = gen_Idx_Pic_wx(dict_stk_list[page][stk])    # 汇总返回    return r_dicclass MyFrame(wx.Frame):    def __init__(self, parent, title):        wx.Frame.__init__(self, parent, id=wx.ID_ANY, title=title)        self.nb = wx.Notebook(self)        # 生成所需图片        r = get_pic_dict()        self.nb.AddPage(MyPanel1(self.nb, r['Index']), "Index")        self.nb.AddPage(MyPanel1(self.nb, r['Buy']), "Buy")        self.nb.AddPage(MyPanel1(self.nb, r['Concerned']), "Concerned")        # 配置和创建定时器        self.timer = wx.Timer(self)        self.Bind(            wx.EVT_TIMER,            self.OnTimer,            self.timer)        self.timer.Start(10000)        self.Show()    def OnTimer(self, evt):        """        定时器响应函数        :return:        """        # 生成更新的图片        pic_dict = timer_update_pic('h')        # 更新图片        for page in range(len(pic_dict.keys())):            # 获取page            p_nb = self.nb.GetPage(page)            # 循环插入图片            key_page = list(pic_dict.keys())[page]            for r_id in range(len(pic_dict[key_page])):                p_nb.insert_Pic_To_Cell(r_id, 1, pic_dict[key_page][r_id])        self.Refresh()        print('完成一次刷新！')if __name__ == '__main__':    from DataSource.auth_info import *    app = wx.App()    frame = MyFrame(None, title="魔灯-V20190919")    frame.Show()    app.MainLoop()