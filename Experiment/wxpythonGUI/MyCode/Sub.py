# encoding=utf-8import matplotlibmatplotlib.use('agg')""" =========================== 将当前路径及工程的跟目录添加到路径中 ============================ """import sysimport osfrom Config.AutoGenerateConfigFile import data_dirfrom Experiment.MiddlePeriodLevelCheck.Demo1 import check_single_stk_middle_levelcurPath = os.path.abspath(os.path.dirname(__file__))rootPath = curPath[:curPath.find("MoDeng\\")+len("MoDeng\\")]  # 获取myProject，也就是项目的根路径sys.path.append('..')sys.path.append(rootPath)import win32guiimport wximport wx.xrcimport wx.gridimport pandas as pdfrom AutoDailyOpt.p_diff_ratio_last import RSV_Recordfrom Experiment.BOLL.Demo import calRSVRankfrom AutoDailyOpt.timely_prompt import JudgeSingleStk, updateRSVRecordfrom Config.Sub import dict_stk_list, readConfigfrom DataSource.Code2Name import code2namefrom Experiment.wxpythonGUI.MyCode.Data_Pro_Sub import get_pic_dictfrom SDK.Gen_Stk_Pic_Sub import gen_Hour_MACD_Pic_wx, \    gen_Day_Pic_wx, gen_W_M_MACD_Pic_wx, gen_Idx_Pic_wxfrom SDK.MyTimeOPT import get_current_datetime_strclass MyImageRenderer(wx.grid.GridCellRenderer):    def __init__(self, img):        wx.grid.GridCellRenderer.__init__(self)        self.img = img    def Draw(self, grid, attr, dc, rect, row, col, isSelected):        image = wx.MemoryDC()        image.SelectObject(self.img)        dc.SetBackgroundMode(wx.SOLID)        if isSelected:            dc.SetBrush(wx.Brush(wx.BLUE, wx.SOLID))            dc.SetPen(wx.Pen(wx.BLUE, 1, wx.SOLID))        else:            dc.SetBrush(wx.Brush(wx.WHITE, wx.SOLID))            dc.SetPen(wx.Pen(wx.WHITE, 1, wx.SOLID))        dc.DrawRectangle(rect)        width, height = self.img.GetWidth(), self.img.GetHeight()        if width > rect.width - 2:            width = rect.width - 2        if height > rect.height - 2:            height = rect.height - 2        dc.Blit(rect.x + 1, rect.y + 1, width, height, image, 0, 0, wx.COPY, True)class MyPanelText(wx.Panel):    def __init__(self, parent):        wx.Panel.__init__(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.Size(500, 300),                          style=wx.TAB_TRAVERSAL)        bSizer1 = wx.BoxSizer(wx.HORIZONTAL)        self.m_textCtrlNote = wx.TextCtrl(self, style=wx.TE_MULTILINE | wx.TE_READONLY, size=wx.Size(550, 800), )        self.m_textCtrlNote.SetForegroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DLIGHT))        self.m_textCtrlNote.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOWTEXT))        self.m_textCtrlMsg = wx.TextCtrl(self, style=wx.TE_MULTILINE | wx.TE_READONLY, size=wx.Size(550, 800))        self.m_textCtrlMsg.SetForegroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DLIGHT))        self.m_textCtrlMsg.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOWTEXT))        bSizer1.Add(self.m_textCtrlNote, 0, wx.ALL, 5)        bSizer1.Add(self.m_textCtrlMsg, 0, wx.ALL, 5)        self.SetSizer(bSizer1)        self.Layout()    def __del__(self):        passclass MyPanelGrid(wx.Panel):    def __init__(self, parent, stk_info):        wx.Panel.__init__(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.Size(500, 300),                          style=wx.TAB_TRAVERSAL)        bSizer4 = wx.BoxSizer(wx.VERTICAL)        self.my_grid4 = wx.grid.Grid(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0)        # Grid        self.my_grid4.CreateGrid(len(stk_info), 5)        self.my_grid4.EnableEditing(True)        self.my_grid4.EnableGridLines(True)        self.my_grid4.EnableDragGridSize(False)        self.my_grid4.SetMargins(0, 0)        # Columns        self.my_grid4.EnableDragColMove(False)        self.my_grid4.EnableDragColSize(True)        self.my_grid4.SetColLabelSize(30)        self.my_grid4.SetColLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)        self.my_grid4.SetColLabelValue(0, "定时检测")        self.my_grid4.SetColLabelValue(1, "小时M")        self.my_grid4.SetColLabelValue(2, "日M")        self.my_grid4.SetColLabelValue(3, "周/月M")        self.my_grid4.SetColLabelValue(4, "其他指数")        # Rows        self.my_grid4.EnableDragRowSize(True)        self.my_grid4.SetRowLabelSize(80)        self.my_grid4.SetRowLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)        # self.my_grid4.SetRowLabelValue()        # Add name to Rows        self.addRowName(list(stk_info.keys()))        # Add pic to cell        for r_id in range(len(stk_info.keys())):            self.insert_Pic_To_Cell(r_id, 1, stk_info[list(stk_info.keys())[r_id]]['hour'])            self.insert_Pic_To_Cell(r_id, 2, stk_info[list(stk_info.keys())[r_id]]['day'])            self.insert_Pic_To_Cell(r_id, 3, stk_info[list(stk_info.keys())[r_id]]['wm'])            self.insert_Pic_To_Cell(r_id, 4, stk_info[list(stk_info.keys())[r_id]]['index'])        # Label Appearance        # Cell Defaults        self.my_grid4.SetDefaultCellAlignment(wx.ALIGN_LEFT, wx.ALIGN_TOP)        # 设置行间隔        # self.my_grid4.SetMargins(0, 2)                bSizer4.Add(self.my_grid4, 0, wx.ALL, 5)        self.SetSizer(bSizer4)        self.Layout()    def __del__(self):        pass    def addRowName(self, stk_code_list):        """        添加行名称        :param stk_code_list:        :return:        """        for idx in range(len(stk_code_list)):            self.my_grid4.SetRowLabelValue(idx, code2name(stk_code_list[idx]))    def insert_Pic_To_Cell(self, r, c, img):        """        :param r:        :param c:        :param pic:        :return:        """        img_Rd = MyImageRenderer(wx.Bitmap(img))        self.my_grid4.SetCellRenderer(r, c, img_Rd)        self.my_grid4.SetColSize(c, img.GetWidth() + 2)        self.my_grid4.SetRowSize(r, img.GetHeight() + 2)def timer_update_pic(kind):    """    在计时器中调用，用于更新小时图片    :param kind:    h:小时    d:天    wm:周、月    idx: 指数    :return:    返回的图片应该 执行page和行号，便于更新！    以多层字典的方式返回结果，第一层区分page，第二层区分行号！    """    r_dic = {        'Index': {},        'Buy': {},        'Concerned': {}    }    for page in ['Index', 'Buy', 'Concerned']:        for stk in range(len(dict_stk_list[page])):            if kind is 'h':                r_dic[page][stk] = gen_Hour_MACD_Pic_wx(dict_stk_list[page][stk])            elif kind is 'd':                r_dic[page][stk] = gen_Day_Pic_wx(dict_stk_list[page][stk])            elif kind is 'wm':                r_dic[page][stk] = gen_W_M_MACD_Pic_wx(dict_stk_list[page][stk])            elif kind is 'idx':                r_dic[page][stk] = gen_Idx_Pic_wx(dict_stk_list[page][stk])    # 汇总返回    return r_dicdef check_stklist_middle_level(stk_list):    """    检测一系列stk的中期水平    :param stk_list:    :param threshold:    :return:    """    # 读取历史小时数据    with open(data_dir+'middlePeriodHourData.json', 'r') as f:        dict = json.load(f)    r = [(x, (1-check_single_stk_middle_level(x, dict)/100)) for x in list(set(stk_list))]    r_df = pd.DataFrame(data=r, columns=['code', 'level'])    r_df['name'] = r_df.apply(lambda x: code2name(x['code']), axis=1)    r_df_sort = r_df.sort_values(by='level', ascending=True).head(12)    return r_df_sortclass MyFrame(wx.Frame):    def __init__(self, parent, title):        wx.Frame.__init__(self, parent, id=wx.ID_ANY, title=title)        self.handle = self.GetHandle()        self.nb = wx.Notebook(self)        # 函数外部的变量        self.last_upt_t = get_t_now()        # 生成所需图片        r = get_pic_dict()        self.nb.AddPage(MyPanelText(self.nb), "控制台")        self.nb.AddPage(MyPanelGrid(self.nb, r['Index']), "指数")        self.nb.AddPage(MyPanelGrid(self.nb, r['Buy']), "持仓")        self.nb.AddPage(MyPanelGrid(self.nb, r['Concerned']), "关注")        # 获取控制台panel对象        self.p_ctrl = self.nb.GetPage(0)        # 更新RSV        # self.RSV_Record = {}        self.updateRSVRecord()        # 配置和创建小时图片更新定时器        self.timer_pic = wx.Timer(self)        self.Bind(            wx.EVT_TIMER,            self.OnTimer,            self.timer_pic)        self.timer_pic.Start(1000*50)        # 配置和创建控制台定时器        self.timer_ctr = wx.Timer(self)        self.Bind(            wx.EVT_TIMER,            self.OnTimerCtrl,            self.timer_ctr)        self.timer_ctr.Start(1000*30)        self.Show()    def OnTimer(self, evt):        """        定时器响应函数        :return:        """        upt_flag, self.last_upt_t = is_time_h_macd_update(self.last_upt_t)        if not upt_flag:            self.p_ctrl.m_textCtrlMsg.AppendText('图片更新定时器：“小时图片”更新时间点未到！\n')            return        # 生成更新的图片        pic_dict = timer_update_pic('h')        # 更新图片        for page in range(1, len(pic_dict.keys())):            # 获取page            p_nb = self.nb.GetPage(page)            # 循环插入图片            key_page = list(pic_dict.keys())[page-1]            for r_id in range(len(pic_dict[key_page])):                p_nb.insert_Pic_To_Cell(r_id, 1, pic_dict[key_page][r_id])        # 计算排名        df_level = check_stklist_middle_level(list(set(readConfig()['buy_stk'] + readConfig()['concerned_stk'])))        self.p_ctrl.m_textCtrlNote.AppendText('以下中期水平排名：\n' + str(df_level))        self.p_ctrl.m_textCtrlNote.AppendText('\n\n------------ 控制分割 ------------\n\n')        win32gui.FlashWindowEx(self.handle, 2, 3, 400)        self.Refresh()    def OnTimerCtrl(self, evt):        """        定时器响应函数        :return:        """        # 不再交易时间不使能定时器        if not is_in_trade_time():            self.p_ctrl.m_textCtrlMsg.AppendText('控制台定时器：当前不属于交易时间！\n')            return        buy_stk_list = readConfig()['buy_stk'] + readConfig()['concerned_stk'] + readConfig()['index_stk']        for stk in buy_stk_list:            str_gui = JudgeSingleStk(stk_code=stk, stk_amount_last=400, qq='', gui=True)            if len(str_gui['note']):                self.p_ctrl.m_textCtrlNote.AppendText(str_gui['note'])                self.p_ctrl.m_textCtrlNote.AppendText('\n\n------------ 控制分割 ------------\n\n')                win32gui.FlashWindowEx(self.handle, 2, 3, 400)            if len(str_gui['msg']):                self.p_ctrl.m_textCtrlMsg.AppendText(str_gui['msg'])                self.p_ctrl.m_textCtrlMsg.AppendText('\n\n------------ 控制分割 ------------\n\n')        self.Refresh()    def updateRSVRecord(self):        try:            code_list = readConfig()['buy_stk']            # global  RSV_Record            for stk in code_list:                RSV_Record[stk] = calRSVRank(stk, 5)        except Exception as e:            self.p_ctrl.m_textCtrlMsg.AppendText('RSV数据更新失败！原因：\n' + str(e) + '\n')def is_in_trade_time():    r = get_current_datetime_str()    h, m, s = r.split(' ')[1].split(':')    t = int(h + m)    if ((t > 930) & (t < 1130)) | ((t > 1300) & (t < 1500)):        return True    else:        return Falsedef get_t_now():    r = get_current_datetime_str()    h, m, s = r.split(' ')[1].split(':')    return int(h + m)def is_time_h_macd_update(last_upt_t):    """    判断是否需要更新小时macd图    选择在    10:00,10:30,11:00,11:30,13:00,13:30,14:00,14:30,15:00    等几个时间点更新图片    :param: last_upt_t 上次更新时间    :return:    """    t_pot = [1000, 1030, 1100, 1130, 1300, 1330, 1400, 1430, 1500]    t = get_t_now()    r_judge = [(t > x) & (last_upt_t < x) for x in t_pot]    if True in r_judge:        return True, t    else:        return False, last_upt_tif __name__ == '__main__':    from DataSource.auth_info import *    app = wx.App()    frame = MyFrame(None, title="魔灯-V20190919")    frame.Show()    app.MainLoop()