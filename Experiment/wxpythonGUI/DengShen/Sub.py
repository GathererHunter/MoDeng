# coding=utf-8import jsonimport threadingimport pandas as pdimport wximport osfrom AutoDailyOpt.Sub import opt_recordfrom Config.Sub import read_config, write_configfrom DataSource.Code2Name import name2code, code2namefrom Experiment.wxpythonGUI.MyCode.note_string import note_dengshen_welcomefrom LSTM.AboutLSTM.Test.TomorrowPredict import predict_tomorrow_indexfrom pylab import *def add_stk(kind, name, tc):	"""	增加持仓	:param name:	:param tc:	:return:	"""	code = name2code(name)	if code is '未知代码':		tc.AppendText(name + ':不识别的stk名字！')		return	# 向配置文件中写入 增加持仓的stk代码	stk_now = read_config()[kind]	if code not in stk_now:		stk_now.append(code)		write_config(kind, stk_now)		tc.AppendText('增加“' + name + '”成功！')	else:		tc.AppendText('增加“' + name + '”失败！')def delete_stk(kind, name, tc):	"""	从持仓中删除	:param name:	:param tc:	:return:	"""	code = name2code(name)	if code is '未知代码':		tc.AppendText(name + ':不识别的stk名字！')		return	# 向配置文件中删除 增加持仓的stk代码	stk_now = read_config()[kind]	if code in stk_now:		stk_now.remove(code)		write_config(kind, stk_now)		tc.AppendText('删除“' + name + '”成功！')	else:		tc.AppendText('删除“' + name + '”失败！原先持仓列表中没有 ' + name)def cat_stk(kind, tc):	"""	查看相关stk列表	:param kind:	:return:	"""	stk_list = read_config()[kind]	stk_name = str([code2name(x) for x in stk_list])	tc.AppendText(stk_name.replace('[', '').replace(']', '').replace(',', '\n'))def input_analysis(input_str, tc):	tc.AppendText('\n\n')	if '增加持仓' in input_str:		ipt_split = input_str.split(' ')		# 向配置文件中写入 增加持仓的stk代码		add_stk(kind='buy_stk', name=ipt_split[1], tc=tc)	elif '删除持仓' in input_str:		ipt_split = input_str.split(' ')		# 向配置文件中写入 增加持仓的stk代码		delete_stk(kind='buy_stk', name=ipt_split[1], tc=tc)	elif '增加关注' in input_str:		ipt_split = input_str.split(' ')		# 向配置文件中写入 增加持仓的stk代码		add_stk(kind='concerned_stk', name=ipt_split[1], tc=tc)	elif '查看记录' in input_str:		ipt_split = input_str.split(' ')		# 画图该stk的操作记录		plot_opt(stk_code=name2code(ipt_split[1]), tc=tc, opt_record=opt_record)	elif '删除关注' in input_str:		ipt_split = input_str.split(' ')		# 向配置文件中写入 增加持仓的stk代码		delete_stk(kind='concerned_stk', name=ipt_split[1], tc=tc)	elif '查看关注' in input_str:		cat_stk(kind='concerned_stk', tc=tc)	elif '查看持仓' in input_str:		cat_stk(kind='buy_stk', tc=tc)	elif '预测明日大盘' in input_str:		# 启动数据处理线程，专用于处理数据，防止软件操作卡顿		index_predict_thread = threading.Thread(target=predict_tomorrow_index, args=(tc, False))		index_predict_thread.start()	elif '清理' == input_str:		tc.SetValue('')	elif '帮助' == input_str:		tc.AppendText(note_dengshen_welcome)	else:		tc.AppendText('没听懂，请小主明示！')class DengShen(wx.Frame):	def __init__(self, parent, title):		super(DengShen, self).__init__(parent, title=title, size=(700, 500))		# 绑定关闭函数		self.Bind(wx.EVT_CLOSE, self.on_close, parent)		panel = wx.Panel(self)		hbox3 = wx.BoxSizer(wx.HORIZONTAL)		self.t3 = wx.TextCtrl(panel, size=(600, 1000), style=wx.TE_MULTILINE)		hbox3.Add(self.t3, 1, wx.EXPAND | wx.ALIGN_LEFT | wx.ALL, 5)		self.t3.Bind(wx.EVT_TEXT_ENTER, self.on_enter_pressed)		self.t3.SetBackgroundColour('Black'), self.t3.SetForegroundColour('Green')		panel.SetSizer(hbox3)		# 打印欢迎语		self.t3.AppendText(note_dengshen_welcome + '\n')		self.Centre()		self.Show()		self.Fit()	def on_close(self, event):		print('进入关闭响应函数！')		global dengshen_on		dengshen_on = False		event.Skip()	def on_key_typed(self, event):		print(event.GetString())	def on_enter_pressed(self, event):		# 获取最后一行		input_str = event.GetString().split('\n')[-1]		try:			input_analysis(input_str, self.t3)			self.t3.AppendText('\n\n小主请吩咐：')		except Exception as e:			self.t3.AppendText('出错了，小神惶恐！原因：\n' + str(e))	def OnMaxLen(self, event):		print("Maximum length reached")def plot_opt(stk_code, opt_record, tc):	if len(opt_record) == 0:		tc.AppendText(code2name(stk_code) + '：没有操作记录！')		return	df = pd.DataFrame(opt_record).set_index('date_time')	# 筛选	df = df[df['stk_code'] == stk_code]	if df.empty:		tc.AppendText(code2name(stk_code) + '：没有操作记录！')	# 计算上下限	df['sale_pot'] = df.apply(lambda x: x['p_last'] + x['sale_reseau'], axis=1)	df['buy_pot'] = df.apply(lambda x: x['p_last'] + x['buy_reseau'], axis=1)	df.loc[:, ['p_last', 'p_now', 'buy_pot', 'sale_pot']].plot(style=['*', '*', '^--', '^--'])	plt.show()if __name__ == '__main__':	file_url = "C:\modeng\data\Opt_Record/2019-11-11record.json"	with open(file_url, 'r') as f:		list_ = json.load(f)		df = pd.DataFrame(list_).set_index('date_time')	# 筛选	df = df[df['stk_code'] == 'sz']	# 计算上下限	df['sale_pot'] = df.apply(lambda x: x['p_last'] + x['sale_reseau'], axis=1)	df['buy_pot'] = df.apply(lambda x: x['p_last'] + x['buy_reseau'], axis=1)	df.loc[:, ['p_last', 'p_now', 'buy_pot', 'sale_pot']].plot(style=['*', '*', '^--', '^--'])	plt.show()	app = wx.App()	DengShen(None, '灯神')	app.MainLoop()